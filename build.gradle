buildscript {
    ext {
        scalaMajorVersion = '2.12'
        scala = '2.12.8'
        scalaCheck = '1.11.1'
        logbackVersion = "1.2.3"
        scalaLoggingVersion = "3.7.2"
        mockitoVersion = '2.7.13'
        slf4jVersion = "1.7.7"
        jodaVersion = "2.9.9"
        Slf4jVersion = "1.7.25"
    }

    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }

    }
    dependencies {
        classpath 'com.github.maiflai:gradle-scalatest:0.14'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3'
    }
}

plugins {
    id "java"
}

allprojects {
    group = 'com.landoop'
    version = version
    description = "Library generating data for Lenses demo"

    apply plugin: 'scala'
    apply plugin: 'application'
    apply plugin: 'distribution'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.typesafe.com/typesafe/releases/" }
        maven {
            url 'https://artifactory.landoop.com/artifactory/libs-release-local'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }

    configurations {
        provided
        compile.extendsFrom provided
    }

    dependencies {
        compile fileTree(dir: 'libs', include: ['*.jar'])

        compile "org.scala-lang:scala-library:$scala"
        compile "com.typesafe:config:1.2.1"
        compile "com.github.scopt:scopt_$scalaMajorVersion:3.7.0"

        provided "joda-time:joda-time:$jodaVersion"

        compile "org.slf4j:slf4j-api:$Slf4jVersion"
        compile "com.typesafe.scala-logging:scala-logging_$scalaMajorVersion:$scalaLoggingVersion"
        compile "ch.qos.logback:logback-classic:$logbackVersion"
    }

    mainClassName = "com.landoop.data.generator.Program"

    jar {
        manifest {
            attributes(
                    'Main-Class': 'com.landoop.data.generator.Program'
            )
        }
    }

    distributions {
        main {
            contents {
                from('.') {
                    include 'lenses.conf'
                }
            }
        }
    }

    test {
        maxParallelForks = 1
        minHeapSize '256m'
        maxHeapSize '2048m'
        systemProperty 'keystore', projectDir.canonicalPath + "/src/test/resources/stc_keystore.jks"
        systemProperty 'truststore', projectDir.canonicalPath + "/src/test/resources/stc_truststore.jks"
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    configurations {
        tests
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task scaladocJar(type: Jar) {
        classifier = 'scaladoc'
        from '../LICENSE'
        from scaladoc
    }

    tasks.withType(Tar) {
        compression Compression.GZIP
        extension = 'tgz'
    }

    artifacts {
        archives javadocJar, scaladocJar, sourcesJar
    }

    task compile(dependsOn: 'compileScala')
    javadoc.dependsOn scaladoc
}
